#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        bt_sel_3 {
            bindings = <&bt3>;
            key-positions = <42 30>;
            layers = <2>;
        };

        bt_sel_4 {
            bindings = <&bt4>;
            key-positions = <30 18>;
            layers = <2>;
        };
    };

    macros {
        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        repeat5_macro: repeat5_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&key_repeat &key_repeat &key_repeat &key_repeat &key_repeat>;
            label = "REPEAT5_MACRO";
        };

        bt_clr_0: bt_clr_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_CLR>;
            label = "BT_CLR_0";
        };

        bt_clr_1: bt_clr_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_CLR>;
            label = "BT_CLR_1";
        };

        bt_clr_2: bt_clr_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_CLR>;
            label = "BT_CLR_2";
        };

        bt_clr_3: bt_clr_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &bt BT_CLR>;
            label = "BT_CLR_3";
        };

        bt_clr_4: bt_clr_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &bt BT_CLR>;
            label = "BT_CLR_4";
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 55 56 57 58 59 43>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 44 45 46 47 48 49 55 56 57 58 59 43 42 50 51 52 53 54>;
        };

        u_asterisk: u_asterisk {
            compatible = "zmk,behavior-unicode";
            label = "U_ASTERISK";
            #binding-cells = <0>;
            unicode = <0x002A>; // *
        };

        u_ampersand: u_ampersand {
            compatible = "zmk,behavior-unicode";
            label = "U_AMPERSAND";
            #binding-cells = <0>;
            unicode = <0x0026>; // &
        };

        u_dollar: u_dollar {
            compatible = "zmk,behavior-unicode";
            label = "U_DOLLAR";
            #binding-cells = <0>;
            unicode = <0x0024>; // $
        };

        u_percent: u_percent {
            compatible = "zmk,behavior-unicode";
            label = "U_PERCENT";
            #binding-cells = <0>;
            unicode = <0x0025>; // %
        };

        u_exclamation: u_exclamation {
            compatible = "zmk,behavior-unicode";
            label = "U_EXCLAMATION";
            #binding-cells = <0>;
            unicode = <0x0021>; // !
        };

        u_at: u_at {
            compatible = "zmk,behavior-unicode";
            label = "U_AT";
            #binding-cells = <0>;
            unicode = <0x0040>; // @
        };

        u_hash: u_hash {
            compatible = "zmk,behavior-unicode";
            label = "U_HASH";
            #binding-cells = <0>;
            unicode = <0x0023>; // #
        };

        u_caret: u_caret {
            compatible = "zmk,behavior-unicode";
            label = "U_CARET";
            #binding-cells = <0>;
            unicode = <0x005E>; // ^
        };

        u_pipe: u_pipe {
            compatible = "zmk,behavior-unicode";
            label = "U_PIPE";
            #binding-cells = <0>;
            unicode = <0x007C>; // |
        };

        u_tilde: u_tilde {
            compatible = "zmk,behavior-unicode";
            label = "U_TILDE";
            #binding-cells = <0>;
            unicode = <0x007E>; // ~
        };

        u_question: u_question {
            compatible = "zmk,behavior-unicode";
            label = "U_QUESTION";
            #binding-cells = <0>;
            unicode = <0x003F>; // ?
        };

        u_plus: u_plus {
            compatible = "zmk,behavior-unicode";
            label = "U_PLUS";
            #binding-cells = <0>;
            unicode = <0x002B>; // +
        };

        u_minus: u_minus {
            compatible = "zmk,behavior-unicode";
            label = "U_MINUS";
            #binding-cells = <0>;
            unicode = <0x002D>; // -
        };

        u_equals: u_equals {
            compatible = "zmk,behavior-unicode";
            label = "U_EQUALS";
            #binding-cells = <0>;
            unicode = <0x003D>; // =
        };

        u_slash: u_slash {
            compatible = "zmk,behavior-unicode";
            label = "U_SLASH";
            #binding-cells = <0>;
            unicode = <0x002F>; // /
        };

        u_backslash: u_backslash {
            compatible = "zmk,behavior-unicode";
            label = "U_BACKSLASH";
            #binding-cells = <0>;
            unicode = <0x005C>; // \
        };

        u_colon: u_colon {
            compatible = "zmk,behavior-unicode";
            label = "U_COLON";
            #binding-cells = <0>;
            unicode = <0x003A>; // :
        };

        u_semicolon: u_semicolon {
            compatible = "zmk,behavior-unicode";
            label = "U_SEMICOLON";
            #binding-cells = <0>;
            unicode = <0x003B>; // ;
        };

        u_comma: u_comma {
            compatible = "zmk,behavior-unicode";
            label = "U_COMMA";
            #binding-cells = <0>;
            unicode = <0x002C>; // ,
        };

        u_dot: u_dot {
            compatible = "zmk,behavior-unicode";
            label = "U_DOT";
            #binding-cells = <0>;
            unicode = <0x002E>; // .
        };

        u_underscore: u_underscore {
            compatible = "zmk,behavior-unicode";
            label = "U_UNDERSCORE";
            #binding-cells = <0>;
            unicode = <0x005F>; // _
        };

        u_grave: u_grave {
            compatible = "zmk,behavior-unicode";
            label = "U_GRAVE";
            #binding-cells = <0>;
            unicode = <0x0060>; // `
        };

        bt0: bt0 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT0";
            bindings = <&bt BT_SEL 0>, <&bt_clr_0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt1: bt1 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT1";
            bindings = <&bt BT_SEL 1>, <&bt_clr_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt2: bt2 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT2";
            bindings = <&bt BT_SEL 2>, <&bt_clr_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt3: bt3 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT3";
            bindings = <&bt BT_SEL 3>, <&bt_clr_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt4: bt4 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT4";
            bindings = <&bt BT_SEL 4>, <&bt_clr_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q             &kp W            &kp E              &kp R        &kp T        &kp Y      &kp U            &kp I              &kp O             &kp P
  &hml LCTRL A      &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LGUI F  &kp G        &kp H      &hmr LGUI J      &hmr LEFT_SHIFT K  &hmr LEFT_ALT L   &hmr LCTRL SEMI
  &kp Z             &kp X            &kp C              &kp V        &kp B        &kp N      &kp M            &kp COMMA          &kp DOT           &kp SQT
  &kp LEFT_BRACKET  &kp RBKT         &kp ESCAPE         &lt 2 TAB    &kp SPACE    &kp ENTER  &lt 1 LG(SPACE)  &kp BACKSPACE      &kp C_VOL_DN      &kp C_VOL_UP
            >;
        };

        num {
            bindings = <
  &u_asterisk       &u_pipe                &u_ampersand                   &u_dollar               &u_exclamation      &u_question     &kp N7  &kp N8          &kp N9        &u_plus
  &u_dot            &u_slash               &u_left_parenthesis            &u_left_brace           &u_left_bracket     &u_grave        &kp N4  &kp N5          &kp N6        &u_comma
  &u_equals         &u_backslash           &u_right_parenthesis           &u_right_brace          &u_right_bracket    &u_at           &kp N1  &kp N2          &kp N3        &kp N0
  &u_hash           &u_tilde               &u_percent                     &u_minus                &u_underscore       &soft_off       &trans  &studio_unlock  &bt BT_SEL 0  &bt BT_CLR
            >;
        };

        fn {
            bindings = <
  &kp LS(LA(LEFT_ARROW))       &kp LS(LA(RIGHT_ARROW))      &kp LA(UP_ARROW)            &kp LA(DOWN_ARROW)         &repeat5_macro    &kp PAGE_UP            &kp HOME               &kp UP                 &kp END                &kp LS(LA(LC(LG(F))))
  &hml LCTRL LG(LEFT_BRACKET)  &hml LALT LG(RIGHT_BRACKET)  &hml LSHIFT LA(LEFT_ARROW)  &hml LGUI LA(RIGHT_ARROW)  &kp LG(LS(N4))    &kp PG_DN              &kp LEFT               &kp DOWN               &kp RIGHT              &kp LS(F6)
  &kp C_PP                     &kp LG(GRAVE)                &kp LA(LG(N))               &kp LA(LG(J))              &kp LG(LS(N5))    &kp LS(LA(LC(LG(C))))  &kp LS(LA(LC(LG(M))))  &kp LS(LA(LC(LG(E))))  &kp LS(LA(LC(LG(L))))  &kp LS(LA(LC(Z)))
  &trans                       &trans                       &trans                      &trans                     &trans            &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(W))))  &kp LS(LA(LC(LG(S))))  &kp LS(LA(LC(LG(T))))  &kp LS(LA(LC(LG(R))))
            >;
        };
    };
};
