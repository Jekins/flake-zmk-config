#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define HOST_OS 2
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/4x12.h"
#include "zmk-helpers/unicode-chars/russian.dtsi"

/ {
    combos {
        compatible = "zmk,combos";

        bt_sel_3 {
            bindings = <&bt3>;
            key-positions = <42 30>;
            layers = <2>;
        };

        bt_sel_4 {
            bindings = <&bt4>;
            key-positions = <30 18>;
            layers = <2>;
        };
    };

    macros {
        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        repeat5_macro: repeat5_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&key_repeat &key_repeat &key_repeat &key_repeat &key_repeat>;
            label = "REPEAT5_MACRO";
        };

        switch_to_ru: switch_to_ru {
            compatible = "zmk,behavior-macro";
            label = "SWITCH_TO_RU";
            #binding-cells = <0>;
            bindings = <
                &tog 3
                &kp LG(SPACE)
            >;
        };

        switch_to_en: switch_to_en {
            compatible = "zmk,behavior-macro";
            label = "SWITCH_TO_EN";
            #binding-cells = <0>;
            bindings = <
                &tog 0
                &kp LG(SPACE)
            >;
        };

        bt_clr_0: bt_clr_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_CLR>;
            label = "BT_CLR_0";
        };

        bt_clr_1: bt_clr_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_CLR>;
            label = "BT_CLR_1";
        };

        bt_clr_2: bt_clr_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_CLR>;
            label = "BT_CLR_2";
        };

        bt_clr_3: bt_clr_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &bt BT_CLR>;
            label = "BT_CLR_3";
        };

        bt_clr_4: bt_clr_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &bt BT_CLR>;
            label = "BT_CLR_4";
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 55 56 57 58 59 43>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 44 45 46 47 48 49 55 56 57 58 59 43 42 50 51 52 53 54>;
        };

        hml_f: hml_f {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_F";
            bindings = <&kp>, <&ru_f>;
            #binding-cells = <1>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 44 45 46 47 48 49 55 56 57 58 59 43 42 50 51 52 53 54>;
        };

        hml_bi: hml_bi {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_BI";
            bindings = <&kp>, <&ru_bi>;
            #binding-cells = <1>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 44 45 46 47 48 49 55 56 57 58 59 43 42 50 51 52 53 54>;
        };

        hml_v: hml_v {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_V";
            bindings = <&kp>, <&ru_v>;
            #binding-cells = <1>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 44 45 46 47 48 49 55 56 57 58 59 43 42 50 51 52 53 54>;
        };

        hml_a: hml_a {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_A";
            bindings = <&kp>, <&ru_a>;
            #binding-cells = <1>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 44 45 46 47 48 49 55 56 57 58 59 43 42 50 51 52 53 54>;
        };

        hmr_o: hmr_o {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_O";
            bindings = <&kp>, <&ru_o>;
            #binding-cells = <1>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 55 56 57 58 59 43>;
        };

        hmr_l: hmr_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_L";
            bindings = <&kp>, <&ru_l>;
            #binding-cells = <1>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 55 56 57 58 59 43>;
        };

        hmr_d: hmr_d {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_D";
            bindings = <&kp>, <&ru_d>;
            #binding-cells = <1>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 55 56 57 58 59 43>;
        };

        hmr_zh: hmr_zh {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_ZH";
            bindings = <&kp>, <&ru_zh>;
            #binding-cells = <1>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 55 56 57 58 59 43>;
        };

        lt_tg: lt_tg {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TOGGLE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&to>;
        };

        bt0: bt0 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT0";
            bindings = <&bt BT_SEL 0>, <&bt_clr_0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt1: bt1 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT1";
            bindings = <&bt BT_SEL 1>, <&bt_clr_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt2: bt2 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT2";
            bindings = <&bt BT_SEL 2>, <&bt_clr_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt3: bt3 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT3";
            bindings = <&bt BT_SEL 3>, <&bt_clr_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt4: bt4 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT4";
            bindings = <&bt BT_SEL 4>, <&bt_clr_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q             &kp W            &kp E              &kp R        &kp T        &kp Y      &kp U            &kp I              &kp O             &kp P
  &hml LCTRL A      &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LGUI F  &kp G        &kp H      &hmr LGUI J      &hmr LEFT_SHIFT K  &hmr LEFT_ALT L   &hmr LCTRL POUND
  &kp Z             &kp X            &kp C              &kp V        &kp B        &kp N      &kp M            &kp COMMA          &kp DOT           &kp SQT
  &kp C_VOL_DN      &kp C_VOL_UP     &kp ESCAPE         &lt 3 TAB    &kp SPACE    &kp ENTER  &lt_tg 2 1       &kp BACKSPACE      &none             &none
            >;
        };

        base_ru {
            bindings = <
  &ru_y             &ru_ts                   &ru_u                       &ru_k                &ru_ye       &ru_n       &ru_g              &ru_sh                  &ru_shch              &ru_z
  &hml_f LCTRL   &hml_bi LEFT_ALT      &hml_v LEFT_SHIFT ru_a        &hml_a LGUI ru_o       &ru_p        &ru_r       &hmr_o LGUI ru_l     &hmr_l LEFT_SHIFT ru_d    &hmr_d LEFT_ALT ru_zh    &hmr_zh LCTRL ru_bi
  &ru_ya            &ru_ch                   &ru_s                       &ru_m                &ru_i        &ru_t       &ru_soft           &ru_b                   &ru_yu                &ru_e
  &kp C_VOL_DN      &kp C_VOL_UP             &kp ESCAPE                  &lt 3 TAB            &kp SPACE    &kp ENTER   &lt_tg 2 0         &kp BACKSPACE           &ru_kh                &ru_hard
            >;
        };

        sym_num {
            bindings = <
  &kp EQUAL         &kp PIPE             &kp AMPERSAND                &kp DOLLAR            &kp EXCLAMATION      &kp QUESTION  &kp N7  &kp N8          &kp N9        &kp AT
  &hml LCTRL COLON  &hml LEFT_ALT SLASH  &hml LSHFT LEFT_PARENTHESIS  &hml LGUI LEFT_BRACE  &kp LEFT_BRACKET     &kp COMMA     &kp N4  &kp N5          &kp N6        &kp DOT
  &kp SEMI          &kp BACKSLASH        &kp RIGHT_PARENTHESIS        &kp RIGHT_BRACE       &kp RIGHT_BRACKET    &kp GRAVE     &kp N1  &kp N2          &kp N3        &kp N0
  &kp ASTERISK      &kp PLUS             &kp PERCENT                  &kp MINUS             &kp UNDERSCORE       &soft_off     &trans  &studio_unlock  &bt BT_SEL 0  &bt BT_CLR
            >;
        };

        nav {
            bindings = <
  &kp LS(LA(LEFT_ARROW))       &kp LS(LA(RIGHT_ARROW))      &kp LA(UP_ARROW)            &kp LA(DOWN_ARROW)         &repeat5_macro    &kp PAGE_UP            &kp HOME               &kp UP                 &kp END                &kp LS(LA(LC(LG(F))))
  &hml LCTRL LG(LEFT_BRACKET)  &hml LALT LG(RIGHT_BRACKET)  &hml LSHIFT LA(LEFT_ARROW)  &hml LGUI LA(RIGHT_ARROW)  &kp LG(LS(N4))    &kp PG_DN              &kp LEFT               &kp DOWN               &kp RIGHT              &kp LS(F6)
  &kp C_PP                     &kp LG(GRAVE)                &kp LA(LG(N))               &kp LA(LG(J))              &kp LG(LS(N5))    &kp LS(LA(LC(LG(C))))  &kp LS(LA(LC(LG(M))))  &kp LS(LA(LC(LG(E))))  &kp LS(LA(LC(LG(L))))  &kp LS(LA(LC(Z)))
  &trans                       &trans                       &trans                      &trans                     &trans            &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(W))))  &kp LS(LA(LC(LG(S))))  &kp LS(LA(LC(LG(T))))  &kp LS(LA(LC(LG(R))))
            >;
        };
    };
};